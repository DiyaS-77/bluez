def on_profile_tab_changed(self, index):
    if not hasattr(self, 'device_tab_widget') or index < 0:
        return  # Prevent early or invalid calls

    selected_tab = self.device_tab_widget.tabText(index)

    # Fresh check before rendering
    if not self.bluetooth_device_manager.is_device_connected(self.device_address):
        print(f"[DEBUG] Skipping profile tab rendering - device {self.device_address} not connected.")
        return

    if selected_tab == "A2DP":
        self.clear_layout(self.a2dp_tab_placeholder)
        layout = QVBoxLayout()
        a2dp_panel = self.build_a2dp_ui(self.device_address)
        layout.addWidget(a2dp_panel)
        self.a2dp_tab_placeholder.setLayout(layout)
        self.a2dp_tab_placeholder.update()

    elif selected_tab == "OPP":
        self.clear_layout(self.opp_tab_placeholder)
        layout = QVBoxLayout()
        opp_tab = self.build_opp_tab(self.device_address)
        layout.addWidget(opp_tab)
        self.opp_tab_placeholder.setLayout(layout)
        self.opp_tab_placeholder.update()
    def build_a2dp_ui(self, device_address):
        """
        Builds a single A2DP panel combining source streaming and sink media control,
        based on the device's A2DP roles.
        """
        bold_font = QFont()
        bold_font.setBold(True)

        layout = QVBoxLayout()
        layout.setSpacing(10)

        a2dp_label = QLabel("<b>A2DP Functionality:</b>")
        layout.addWidget(a2dp_label)

        self.device_address_source = device_address # Assume the selected device is both source/sink for the UI
        self.device_address_sink = device_address # Set this for media control

        role = self.get_a2dp_role_for_device(device_address)

        if role in ["sink", "both"]:
            # A2DP Source (streaming to this device)
            streaming_group = QGroupBox("Streaming Audio (A2DP Source)")
            streaming_layout = QVBoxLayout()
            streaming_group.setLayout(streaming_layout)

            audio_layout = QHBoxLayout()
            audio_layout.addWidget(QLabel("Audio File:"))
            self.audio_location_input = QLineEdit()
            self.audio_location_input.setReadOnly(True)
            audio_layout.addWidget(self.audio_location_input)
            self.browse_audio_button = QPushButton("Browse...")
            self.browse_audio_button.clicked.connect(self.browse_audio_file)
            audio_layout.addWidget(self.browse_audio_button)
            streaming_layout.addLayout(audio_layout)

            streaming_buttons_layout = QHBoxLayout()
            self.start_streaming_button = QPushButton("Start Streaming")
            self.start_streaming_button.setObjectName("startButton")
            self.start_streaming_button.clicked.connect(self.bluetooth_device_manager.start_a2dp_stream)
            streaming_buttons_layout.addWidget(self.start_streaming_button)

            self.stop_streaming_button = QPushButton("Stop Streaming")
            self.stop_streaming_button.setObjectName("stopButton")
            self.stop_streaming_button.clicked.connect(self.bluetooth_device_manager.stop_a2dp_stream)
            self.stop_streaming_button.setEnabled(False)
            streaming_buttons_layout.addWidget(self.stop_streaming_button)
            streaming_layout.addLayout(streaming_buttons_layout)

            layout.addWidget(streaming_group)

        if role in ["source", "both"]:
            # A2DP Sink (controlling this device's media)
            media_control_group = QGroupBox("Media Control (A2DP Sink)")
            media_control_group.setFont(bold_font)
            media_control_layout = QVBoxLayout()
            media_control_group.setLayout(media_control_layout)


            control_buttons = QHBoxLayout()
            self.play_button = QPushButton("Play")
            self.play_button.setFont(bold_font)
            self.play_button.clicked.connect(lambda: self.media_control("play"))
            control_buttons.addWidget(self.play_button)

            self.pause_button = QPushButton("Pause")
            self.pause_button.setFont(bold_font)
            self.pause_button.clicked.connect(lambda: self.media_control("pause"))
            control_buttons.addWidget(self.pause_button)

            self.next_button = QPushButton("Next")
            self.next_button.setFont(bold_font)
            self.next_button.clicked.connect(lambda: self.media_control("next"))
            control_buttons.addWidget(self.next_button)

            self.previous_button = QPushButton("Previous")
            self.previous_button.setFont(bold_font)
            self.previous_button.clicked.connect(lambda: self.media_control("previous"))
            control_buttons.addWidget(self.previous_button)

            self.rewind_button = QPushButton("Rewind")
            self.rewind_button.setFont(bold_font)
            self.rewind_button.clicked.connect(lambda: self.media_control("rewind"))
            control_buttons.addWidget(self.rewind_button)

            media_control_layout.addLayout(control_buttons)
            layout.addWidget(media_control_group)

        widget = QWidget()
        widget.setLayout(layout)
        return widget

    def media_control(self,command):
        self.bluetooth_device_manager.media_control(command)

    def start_streaming(self):
        """
        Start A2DP streaming to a selected Bluetooth sink device.
        Validates file and device selection.

        args:None
        returns: None

        """

        audio_path = self.audio_location_input.text().strip()
        if not audio_path or not os.path.exists(audio_path):
            QMessageBox.warning(self, "Invalid Audio File", "Please select a valid audio file to stream.")
            return

        # Ensure that the correct sink device is selected
        #selected_index = self.device_selector.currentIndex()
        #self.device_address_source = self.device_selector.itemData(selected_index)

        print(f"Selected device address for streaming: {self.device_address_source}")

        if not self.device_address_source:
            QMessageBox.warning(self, "No Device", "Please select a Bluetooth sink device to stream.")
            return

        print(f"A2DP streaming started with file: {audio_path}")

        self.start_streaming_button.setEnabled(False)
        self.stop_streaming_button.setEnabled(True)

        # Create BluetoothDeviceManager instance and start streaming
        success = self.bluetooth_device_manager.start_a2dp_stream(self.device_address_source, audio_path)

        if not success:
            QMessageBox.critical(self, "Streaming Failed", "Failed to start streaming.")
            self.start_streaming_button.setEnabled(True)
            self.stop_streaming_button.setEnabled(False)

    def stop_streaming(self):
        """
        Stop active A2DP streaming session.

        args: None
        returns: None
        """
        print("A2DP streaming stopped")
        self.start_streaming_button.setEnabled(True)
        self.stop_streaming_button.setEnabled(False)

        self.bluetooth_device_manager.stop_a2dp_stream()

        if hasattr(self, 'streaming_timer'):
            self.streaming_timer.stop()


    def refresh_a2dp_sink_devices(self):
        """Refresh the list of connected A2DP source devices for sink control.

        args: None
        returns: None
        """
        self.device_selector_sink.clear()
        connected_sources = self.bluetooth_device_manager.get_connected_a2dp_source_devices()
        for address, name in connected_sources.items():
            self.device_selector_sink.addItem(f"{name} ({address})", address)

    def browse_audio_file(self):
        """Open a file dialog for selecting an audio file.

        args: None
        returns: None
        """
        file_dialog = QFileDialog()
        file_path, _ = file_dialog.getOpenFileName(None, "Select Audio File", "",
                                                   "Audio Files (*.mp3 *.wav *.ogg *.flac);;All Files (*)")
        if file_path:
            self.audio_location_input.setText(file_path)


    def get_a2dp_role_for_device(self, device_address):
        sinks = self.bluetooth_device_manager.get_connected_a2dp_sink_devices(self.interface)
        sources = self.bluetooth_device_manager.get_connected_a2dp_source_devices(self.interface)

        if device_address in sinks and device_address in sources:
            return "both"
        elif device_address in sinks:
            return "sink"
        elif device_address in sources:
            return "source"
        return None


#------------------OPP METHODS------------------------

    def browse_opp_file(self):
        """
        Open a file dialog to select a file to send via OPP.

        args: None
        returns: None
        """

        file_dialog = QFileDialog()
        file_path, _ = file_dialog.getOpenFileName(
            None,
            "Select File to Send via OPP",
            "",
            "All Files (*)"
        )
        if file_path:
            self.opp_location_input.setText(file_path)

    def send_file(self):
        """
        Send a selected file to a remote device using OPP.

        args: None
        returns: None
        """

        file_path = self.opp_location_input.text()
        #device_index = self.device_selector.currentIndex()
        #device_address = self.device_selector.itemData(device_index)

        if not file_path or not self.device_address:
            QMessageBox.warning(None, "OPP", "Please select a device and a file.")
            return

        self.send_file_button.setEnabled(False)
        self.send_file_button.setText("Sending...")

        try:
            success = self.bluetooth_device_manager.send_file_via_obex(self.device_address, file_path)
        except Exception as e:
            success = False
            print(f"UI error: {e}")

        self.send_file_button.setEnabled(True)
        self.send_file_button.setText("Send File")

        if success is True:
            QMessageBox.information(None, "OPP", "File sent successfully!")
        else:
            QMessageBox.warning(None, "OPP",
                                "Notification has been sent to the remote device, accept it to receive the object")

    def receive_file(self):
        """
        Start OPP receiver to receive files from a remote device.

        args: None
        returns: None
        """

        success = self.bluetooth_device_manager.start_opp_receiver()
        QMessageBox.information(None, "OPP", "Ready to receive files..." if success else "Failed to start receiver.")

    def build_opp_tab(self,device_address):
        bold_font = QFont()
        bold_font.setBold(True)

        layout = QVBoxLayout()
        opp_label = QLabel("OPP Functionality:")
        opp_label.setFont(bold_font)
        opp_label.setStyleSheet("color:black;")
        layout.addWidget(opp_label)

        # Device selection
        '''
        connected_devices = self.bluetooth_device_manager.get_connected_devices()
        device_selection_layout = QHBoxLayout()
        device_label = QLabel("Select Device:")
        device_label.setFont(bold_font)
        device_label.setStyleSheet("color:black;")
        device_selection_layout.addWidget(device_label)
        self.device_selector = QComboBox()
        for address, name in connected_devices.items():
            self.device_selector.addItem(f"{name} ({address})", address)
        self.device_selector.currentIndexChanged.connect(self.on_device_selected_for_a2dp)
        device_selection_layout.addWidget(self.device_selector)
        layout.addLayout(device_selection_layout)
        '''

        #device_label = QLabel(f"Sending/Receiving with Device: {self.device_address}")
        #device_label.setFont(bold_font)
        #device_label.setStyleSheet("color:black;")
        #layout.addWidget(device_label)

        # File selection
        is_connected= self.bluetooth_device_manager.is_device_connected(device_address)
        #is connected=self.bluetooth_device_manager.get_connected_devices(device_address)
        if is_connected:
            file_selection_layout = QHBoxLayout()
            file_label = QLabel("Select File:")
            file_label.setFont(bold_font)
            file_label.setStyleSheet("color:black;")
            file_selection_layout.addWidget(file_label)
            self.opp_location_input = QLineEdit()
            self.opp_location_input.setReadOnly(True)
            file_selection_layout.addWidget(self.opp_location_input)
            self.browse_opp_button = QPushButton("Browse")
            self.browse_opp_button.setFont(bold_font)
            self.browse_opp_button.clicked.connect(self.browse_opp_file)
            file_selection_layout.addWidget(self.browse_opp_button)
            layout.addLayout(file_selection_layout)


        # Send and Receive buttons
            button_layout = QHBoxLayout()
            self.send_file_button = QPushButton("Send File")
            self.send_file_button.setFont(bold_font)
            self.send_file_button.setStyleSheet("color:black;")
            self.send_file_button.clicked.connect(self.send_file)
            button_layout.addWidget(self.send_file_button)

            self.receive_file_button = QPushButton("Receive File")
            self.receive_file_button.setFont(bold_font)
            self.receive_file_button.setStyleSheet("color:black;")
            self.receive_file_button.clicked.connect(self.receive_file)
            button_layout.addWidget(self.receive_file_button)

            layout.addLayout(button_layout)

        widget = QWidget()
        widget.setLayout(layout)
        widget.setStyleSheet("background-color: lightblue; color: black;")
        return widget

#-------------PROFILE TABS GENERATION-----------------------------
    def load_profile_tabs_for_device(self, device_address):
        bold_font = QFont()
        bold_font.setBold(True)
        is_connected = self.bluetooth_device_manager.is_device_connected(device_address)
        #print(is_connected)
        if hasattr(self, 'profile_methods_widget'):
            self.profile_methods_widget.setParent(None)

        self.device_address = device_address
        self.profile_description_text_browser.clear()
        if is_connected:
            self.profile_description_text_browser.append(f"Connected Device: {device_address}")
        self.profile_description_text_browser.setFont(bold_font)
        self.profile_description_text_browser.append("Select a profile to proceed (A2DP or OPP)")

        # Create empty tabs for A2DP and OPP
        self.device_tab_widget = QTabWidget()
        self.device_tab_widget.setMaximumWidth(600)
        self.device_tab_widget.setFont(bold_font)
        self.device_tab_widget.setStyleSheet("color: black; background-color: lightblue;")

        self.a2dp_tab_placeholder = QWidget()
        self.a2dp_tab_placeholder.setMaximumWidth(600)
        self.opp_tab_placeholder = QWidget()
        self.opp_tab_placeholder.setMaximumWidth(600)

        self.device_tab_widget.addTab(self.a2dp_tab_placeholder, "A2DP")
        self.device_tab_widget.addTab(self.opp_tab_placeholder, "OPP")

        self.device_tab_widget.currentChanged.connect(self.on_profile_tab_changed)

        # === Main layout with tabs + optional connect button ===
        self.profile_methods_layout = QVBoxLayout()
        self.profile_methods_layout.addWidget(self.device_tab_widget)

        # Show connect button if device is not connected
        if not self.bluetooth_device_manager.is_device_connected(device_address):
            warning_label = QLabel(" Device is not connected. Connect to enable profile controls.")
            warning_label.setFont(bold_font)
            warning_label.setStyleSheet("color: red;")
            self.profile_methods_layout.addWidget(warning_label)

        self.profile_methods_widget = QWidget()
        self.profile_methods_widget.setMaximumWidth(500)
        self.profile_methods_widget.setLayout(self.profile_methods_layout)

        self.findChild(QGridLayout).addWidget(self.profile_methods_widget, 2, 2, 3, 1)

        # Trigger tab setup if already connected
        if self.bluetooth_device_manager.is_device_connected(device_address):
            self.on_profile_tab_changed(self.device_tab_widget.currentIndex())
        # ✅ Add connect/disconnect/unpair control buttons

        self.add_connection_controls(self.profile_methods_layout, device_address)


    def add_connection_controls(self, layout: QVBoxLayout, device_address: str):
        """
        Add Connect / Disconnect / Unpair buttons to the given layout.
        These buttons remain visible but enable/disable based on current device state.
        """
        bold_font = QFont()
        bold_font.setBold(True)

        button_layout = QHBoxLayout()

        self.is_connected = self.bluetooth_device_manager.is_device_connected(device_address)
        self.is_paired = device_address in self.bluetooth_device_manager.get_paired_devices(device_address)

        # Connect Button
        self.connect_button = QPushButton("Connect")
        #self.update_device_buttons_state(device_address)  # Enable/disable based on state
        self.connect_button.setFont(bold_font)
        self.connect_button.setStyleSheet("color: black; padding: 4px;")
        self.connect_button.setFixedWidth(100)
        self.connect_button.setEnabled(not self.is_connected)
        self.connect_button.clicked.connect(lambda: self.connect_and_reload(device_address))
        button_layout.addWidget(self.connect_button)

        # Disconnect Button
        self.disconnect_button = QPushButton("Disconnect")
        self.disconnect_button.setFont(bold_font)
        self.disconnect_button.setStyleSheet("color: black; padding: 4px;")
        self.disconnect_button.setFixedWidth(100)
        self.disconnect_button.setEnabled(self.is_connected)

        self.disconnect_button.clicked.connect(lambda: self.disconnect_and_reload(device_address))
        button_layout.addWidget(self.disconnect_button)

        # Unpair Button
        self.unpair_button = QPushButton("Unpair")
        self.unpair_button.setFont(bold_font)
        self.unpair_button.setStyleSheet("color: black; padding: 4px;")
        self.unpair_button.setFixedWidth(100)
        #self.unpair_button.setEnabled(self.is_paired)
        self.unpair_button.setEnabled(True)

        self.unpair_button.clicked.connect(lambda checked= False, addr=device_address: self.unpair_and_reload(addr))
        #self.unpair_button.clicked.connect(lambda: print("unpair button clicked"))
        button_layout.addWidget(self.unpair_button)

        layout.addLayout(button_layout)

    def connect_and_reload(self, device_address):
        success = self.bluetooth_device_manager.br_edr_connect(device_address,self.interface)
        if success:
            print(f"[INFO] {device_address} connected successfully.")
            self.load_profile_tabs_for_device(device_address)
        else:
            QMessageBox.warning(self, "Connection Failed", f"Failed to connect to {device_address}.")

    def disconnect_and_reload(self, device_address):
        success = self.bluetooth_device_manager.disconnect_le_device(device_address,self.interface)
        if success:
            print(f"[INFO] Disconnected from {device_address}")
        else:
            QMessageBox.warning(self, "Disconnection Failed", f"Could not disconnect from {device_address}")
        self.load_profile_tabs_for_device(device_address)

    def unpair_and_reload(self, device_address):
        success = self.bluetooth_device_manager.remove_device(device_address,self.interface)
        if success:
            print(f"[INFO] Unpaired {device_address}")
        else:
            QMessageBox.warning(self, "Unpair Failed", f"Could not unpair {device_address}")
        self.remove_unpaired_device(device_address)

        if (self.profiles_list_widget.count())==1:
            self.profiles_list_widget.itemSelectionChanged.connect(self.profile_selected)
        else:
            self.load_profile_tabs_for_device(device_address)

    def remove_unpaired_device(self, unpaired_address):
        """
        Removes a specific unpaired device from the profiles list (if present).
        This avoids clearing the entire list and keeps all other devices intact.
        """
        for i in range(self.profiles_list_widget.count()):
            item_text = self.profiles_list_widget.item(i).text().strip()
            if item_text == unpaired_address:
                self.profiles_list_widget.takeItem(i)
                break

#---------PROFILE TAB SELECTION-----------------------------
    def on_profile_tab_changed(self, index):
        if not hasattr(self, 'device_tab_widget') or index < 0:
            return  # Prevent early or invalid calls

        selected_tab = self.device_tab_widget.tabText(index)



        if selected_tab == "A2DP":
            self.clear_layout(self.a2dp_tab_placeholder)
            layout = QVBoxLayout()
            # Build the consolidated A2DP panel directly
            a2dp_panel = self.build_a2dp_ui(self.device_address)
            print(self.device_address)
            layout.addWidget(a2dp_panel)
            self.a2dp_tab_placeholder.setLayout(layout)
            self.a2dp_tab_placeholder.update()

        elif selected_tab == "OPP":
            self.clear_layout(self.opp_tab_placeholder)
            layout = QVBoxLayout()
            opp_tab = self.build_opp_tab(self.device_address)
            layout.addWidget(opp_tab)
            self.opp_tab_placeholder.setLayout(layout)
            self.opp_tab_placeholder.update()


    def clear_layout(self, widget):
        layout = widget.layout()
        if layout is not None:
            while layout.count():
                child = layout.takeAt(0)
                if child.widget():
                    child.widget().deleteLater()
            QWidget().setLayout(layout)  # Detach layout from widget

#---------CONNECTED/PAIRED DEVICE ADDED BELOW GAP---------

    def add_device(self, device_address):
        """
        Adds a device address below the GAP item in the profile list if not already present.
        Args:
            device_address (str): The paired/connected device MAC address (e.g., 20:32:C6:7B:91:1C)
        """

        #Add already connected devices at startup

        # Find GAP index
        for i in range(self.profiles_list_widget.count()):
            if self.profiles_list_widget.item(i).text().strip() == "GAP":
                gap_index = i
                break
        else:
            return  # GAP not found

        # Check if device is already added
        for i in range(self.profiles_list_widget.count()):
            if self.profiles_list_widget.item(i).text().strip() == device_address:
                return  # Already added

        # Add device address as a new list item
        device_item = QListWidgetItem(device_address)
        device_item.setFont(QFont("Arial", 10))
        device_item.setForeground(Qt.GlobalColor.black)

        self.profiles_list_widget.insertItem(gap_index + 1, device_item)


#------CHECK IF IT IS VALID BLUETOOTH ADDRESS-------
    def is_bluetooth_address(self, text):
        pattern = r"^[0-9A-Fa-f]{2}(:[0-9A-Fa-f]{2}){5}$"
        return re.match(pattern, text) is not None
