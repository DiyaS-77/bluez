def remove_device(self, address, interface):
    """
    Remove the bonded device from the system using the specified controller.

    :param address: Bluetooth device MAC address.
    :param interface: Controller interface (e.g., 'hci0', 'hci1')
    :return: True if removed or already gone, False otherwise.
    """
    adapter_path = f"/org/bluez/{interface}"

    om = dbus.Interface(self.bus.get_object("org.bluez", "/"), "org.freedesktop.DBus.ObjectManager")
    objects = om.GetManagedObjects()

    for path, interfaces in objects.items():
        if "org.bluez.Device1" in interfaces:
            props = interfaces["org.bluez.Device1"]
            if props.get("Address") == address and props.get("Adapter") == adapter_path:
                try:
                    adapter = dbus.Interface(
                        self.bus.get_object("org.bluez", adapter_path),
                        "org.bluez.Adapter1"
                    )
                    adapter.RemoveDevice(path)
                    print(f"[Bluetooth] Removed device {address} on {interface}")
                    return True
                except dbus.exceptions.DBusException as e:
                    print(f"[Bluetooth] Failed to remove {address} on {interface}: {e}")
                    return False

    print(f"[Bluetooth] Device {address} not found on {interface}")
    return True  # Considered success if already removed
def get_connected_a2dp_source_devices(self, interface):
    """
    Get a list of currently connected A2DP source devices on the given interface.

    Args:
        interface (str): Controller interface like 'hci0' or 'hci1'

    Returns:
        dict: Dictionary of connected A2DP source devices (MAC -> Name)
    """
    connected = {}
    adapter_path = f"/org/bluez/{interface}"
    om = dbus.Interface(self.bus.get_object("org.bluez", "/"), "org.freedesktop.DBus.ObjectManager")
    objects = om.GetManagedObjects()

    for path, interfaces in objects.items():
        if "org.bluez.Device1" in interfaces:
            props = interfaces["org.bluez.Device1"]
            if props.get("Connected", False) and props.get("Adapter") == adapter_path:
                uuids = props.get("UUIDs", [])
                if any("110a" in uuid.lower() for uuid in uuids):  # A2DP Source UUID
                    address = props.get("Address")
                    name = props.get("Name", "Unknown")
                    connected[address] = name
    return connected





def get_connected_a2dp_sink_devices(self, interface):
    """
    Get a list of currently connected A2DP sink devices on the given interface.

    Args:
        interface (str): Controller interface like 'hci0' or 'hci1'

    Returns:
        dict: Dictionary of connected A2DP sink devices (MAC -> Name)
    """
    connected = {}
    adapter_path = f"/org/bluez/{interface}"
    om = dbus.Interface(self.bus.get_object("org.bluez", "/"), "org.freedesktop.DBus.ObjectManager")
    objects = om.GetManagedObjects()

    for path, interfaces in objects.items():
        if "org.bluez.Device1" in interfaces:
            props = interfaces["org.bluez.Device1"]
            if props.get("Connected", False) and props.get("Adapter") == adapter_path:
                uuids = props.get("UUIDs", [])
                if any("110b" in uuid.lower() for uuid in uuids):  # A2DP Sink UUID
                    address = props.get("Address")
                    name = props.get("Name", "Unknown")
                    connected[address] = name
    return connected





def media_control(self, command):
    """
    Send an AVRCP media control command to a connected A2DP device using the correct controller.

    Supported commands: play, pause, next, previous, rewind.

    :param command: The command to send as a string.
    :return: Result message.
    """
    valid = {
        "play": "Play",
        "pause": "Pause",
        "next": "Next",
        "previous": "Previous",
        "rewind": "FastRewind"
    }

    if command not in valid:
        return f"Invalid command: {command}"

    om = dbus.Interface(self.bus.get_object("org.bluez", "/"), "org.freedesktop.DBus.ObjectManager")
    objects = om.GetManagedObjects()

    # Filter MediaControl1 interfaces under the current adapter (e.g., hci0)
    for path, interfaces in objects.items():
        if "org.bluez.MediaControl1" in interfaces and f"/{self.interface}/" in path:
            try:
                control_iface = dbus.Interface(self.bus.get_object("org.bluez", path), "org.bluez.MediaControl1")
                getattr(control_iface, valid[command])()
                return f"AVRCP {command} sent to {path}"
            except Exception as e:
                return f"Error sending AVRCP {command}: {str(e)}"

    return f"No MediaControl1 interface found under {self.interface} (is device connected via A2DP with AVRCP?)"





  def load_profile_tabs_for_device(self, device_address):
        bold_font = QFont()
        bold_font.setBold(True)
        is_connected = self.bluetooth_device_manager.is_device_connected(device_address)

        if hasattr(self, 'profile_methods_widget'):
            self.profile_methods_widget.setParent(None)

        self.device_address = device_address
        self.profile_description_text_browser.clear()
        if is_connected:
            self.profile_description_text_browser.append(f"Connected Device: {device_address}")
        self.profile_description_text_browser.setFont(bold_font)
        self.profile_description_text_browser.append("Select a profile to proceed (A2DP or OPP)")

        # Create empty tabs for A2DP and OPP
        self.device_tab_widget = QTabWidget()
        self.device_tab_widget.setMaximumWidth(600)
        self.device_tab_widget.setFont(bold_font)
        self.device_tab_widget.setStyleSheet("color: black; background-color: lightblue;")

        self.a2dp_tab_placeholder = QWidget()
        self.a2dp_tab_placeholder.setMaximumWidth(600)
        self.opp_tab_placeholder = QWidget()
        self.opp_tab_placeholder.setMaximumWidth(600)

        self.device_tab_widget.addTab(self.a2dp_tab_placeholder, "A2DP")
        self.device_tab_widget.addTab(self.opp_tab_placeholder, "OPP")

        self.device_tab_widget.currentChanged.connect(self.on_profile_tab_changed)

        # === Main layout with tabs + optional connect button ===
        self.profile_methods_layout = QVBoxLayout()
        self.profile_methods_layout.addWidget(self.device_tab_widget)

        # Show connect button if device is not connected
        if not self.bluetooth_device_manager.is_device_connected(device_address):
            warning_label = QLabel(" Device is not connected. Connect to enable profile controls.")
            warning_label.setFont(bold_font)
            warning_label.setStyleSheet("color: red;")
            self.profile_methods_layout.addWidget(warning_label)

        self.profile_methods_widget = QWidget()
        self.profile_methods_widget.setMaximumWidth(500)
        self.profile_methods_widget.setLayout(self.profile_methods_layout)

        self.findChild(QGridLayout).addWidget(self.profile_methods_widget, 2, 2, 3, 1)

        # Trigger tab setup if already connected
        if self.bluetooth_device_manager.is_device_connected(device_address):
            self.on_profile_tab_changed(self.device_tab_widget.currentIndex())
        # âœ… Add connect/disconnect/unpair control buttons

        self.add_connection_controls(self.profile_methods_layout, device_address)


    def add_connection_controls(self, layout: QVBoxLayout, device_address: str):
        """
        Add Connect / Disconnect / Unpair buttons to the given layout.
        These buttons remain visible but enable/disable based on current device state.
        """
        bold_font = QFont()
        bold_font.setBold(True)

        button_layout = QHBoxLayout()

        self.is_connected = self.bluetooth_device_manager.is_device_connected(device_address)
        self.is_paired = device_address in self.bluetooth_device_manager.get_paired_devices()

        # Connect Button
        self.connect_button = QPushButton("Connect")
        #self.update_device_buttons_state(device_address)  # Enable/disable based on state
        self.connect_button.setFont(bold_font)
        self.connect_button.setStyleSheet("color: black; padding: 4px;")
        self.connect_button.setFixedWidth(100)
        self.connect_button.setEnabled(not self.is_connected)
        self.connect_button.clicked.connect(lambda: self.connect_and_reload(device_address))
        button_layout.addWidget(self.connect_button)

        # Disconnect Button
        self.disconnect_button = QPushButton("Disconnect")
        self.disconnect_button.setFont(bold_font)
        self.disconnect_button.setStyleSheet("color: black; padding: 4px;")
        self.disconnect_button.setFixedWidth(100)
        self.disconnect_button.setEnabled(self.is_connected)
        self.disconnect_button.clicked.connect(lambda: self.disconnect_and_reload(device_address))
        button_layout.addWidget(self.disconnect_button)

        # Unpair Button
        self.unpair_button = QPushButton("Unpair")
        self.unpair_button.setFont(bold_font)
        self.unpair_button.setStyleSheet("color: black; padding: 4px;")
        self.unpair_button.setFixedWidth(100)
        self.unpair_button.setEnabled(self.is_paired)
        self.unpair_button.clicked.connect(lambda: self.unpair_and_reload(device_address))
        button_layout.addWidget(self.unpair_button)

        layout.addLayout(button_layout)

    def connect_and_reload(self, device_address):
        success = self.bluetooth_device_manager.br_edr_connect(device_address,self.interface)
        if success:
            print(f"[INFO] {device_address} connected successfully.")
            self.load_profile_tabs_for_device(device_address)
        else:
            QMessageBox.warning(self, "Connection Failed", f"Failed to connect to {device_address}.")

    def disconnect_and_reload(self, device_address):
        success = self.bluetooth_device_manager.disconnect_le_device(device_address,self.interface)
        if success:
            print(f"[INFO] Disconnected from {device_address}")
        else:
            QMessageBox.warning(self, "Disconnection Failed", f"Could not disconnect from {device_address}")
        self.load_profile_tabs_for_device(device_address)

    def unpair_and_reload(self, device_address):
        success = self.bluetooth_device_manager.remove_device(device_address,self.interface)
        if success:
            print(f"[INFO] Unpaired {device_address}")
        else:
            QMessageBox.warning(self, "Unpair Failed", f"Could not unpair {device_address}")
        self.remove_unpaired_device(device_address)
        self.load_profile_tabs_for_device(device_address)

    def remove_unpaired_device(self, unpaired_address):
        """
        Removes a specific unpaired device from the profiles list (if present).
        This avoids clearing the entire list and keeps all other devices intact.
        """
        for i in range(self.profiles_list_widget.count()):
            item_text = self.profiles_list_widget.item(i).text().strip()
            if item_text == unpaired_address:
                self.profiles_list_widget.takeItem(i)
                break
      def on_profile_tab_changed(self, index):
        if not hasattr(self, 'device_tab_widget') or index < 0:
            return  # Prevent early or invalid calls

        selected_tab = self.device_tab_widget.tabText(index)



        if selected_tab == "A2DP":
            self.clear_layout(self.a2dp_tab_placeholder)
            layout = QVBoxLayout()
            # Build the consolidated A2DP panel directly
            a2dp_panel = self.build_a2dp_ui(self.device_address)
            print(self.device_address)
            layout.addWidget(a2dp_panel)
            self.a2dp_tab_placeholder.setLayout(layout)
            self.a2dp_tab_placeholder.update()

        elif selected_tab == "OPP":
            self.clear_layout(self.opp_tab_placeholder)
            layout = QVBoxLayout()
            opp_tab = self.build_opp_tab()
            layout.addWidget(opp_tab)
            self.opp_tab_placeholder.setLayout(layout)
            self.opp_tab_placeholder.update()


    def clear_layout(self, widget):
        layout = widget.layout()
        if layout is not None:
            while layout.count():
                child = layout.takeAt(0)
                if child.widget():
                    child.widget().deleteLater()
            QWidget().setLayout(layout)  # Detach layout from widget

    def build_a2dp_ui(self, device_address):
        """
        Builds a single A2DP panel combining source streaming and sink media control,
        based on the device's A2DP roles.
        """
        bold_font = QFont()
        bold_font.setBold(True)

        layout = QVBoxLayout()
        layout.setSpacing(10)

        a2dp_label = QLabel("<b>A2DP Functionality:</b>")
        layout.addWidget(a2dp_label)

        self.device_address_source = device_address # Assume the selected device is both source/sink for the UI
        self.device_address_sink = device_address # Set this for media control

        role = self.get_a2dp_role_for_device(device_address)

        if role in ["sink", "both"]:
            # A2DP Source (streaming to this device)
            streaming_group = QGroupBox("Streaming Audio (A2DP Source)")
            streaming_layout = QVBoxLayout()
            streaming_group.setLayout(streaming_layout)

            audio_layout = QHBoxLayout()
            audio_layout.addWidget(QLabel("Audio File:"))
            self.audio_location_input = QLineEdit()
            self.audio_location_input.setReadOnly(True)
            audio_layout.addWidget(self.audio_location_input)
            self.browse_audio_button = QPushButton("Browse...")
            self.browse_audio_button.clicked.connect(self.browse_audio_file)
            audio_layout.addWidget(self.browse_audio_button)
            streaming_layout.addLayout(audio_layout)

            streaming_buttons_layout = QHBoxLayout()
            self.start_streaming_button = QPushButton("Start Streaming")
            self.start_streaming_button.setObjectName("startButton")
            self.start_streaming_button.clicked.connect(self.bluetooth_device_manager.start_a2dp_stream)
            streaming_buttons_layout.addWidget(self.start_streaming_button)

            self.stop_streaming_button = QPushButton("Stop Streaming")
            self.stop_streaming_button.setObjectName("stopButton")
            self.stop_streaming_button.clicked.connect(self.bluetooth_device_manager.stop_a2dp_stream)
            self.stop_streaming_button.setEnabled(False)
            streaming_buttons_layout.addWidget(self.stop_streaming_button)
            streaming_layout.addLayout(streaming_buttons_layout)

            layout.addWidget(streaming_group)

        if role in ["source", "both"]:
            # A2DP Sink (controlling this device's media)
            media_control_group = QGroupBox("Media Control (A2DP Sink)")
            media_control_group.setFont(bold_font)
            media_control_layout = QVBoxLayout()
            media_control_group.setLayout(media_control_layout)


            control_buttons = QHBoxLayout()
            self.play_button = QPushButton("Play")
            self.play_button.setFont(bold_font)
            self.play_button.clicked.connect(lambda: self.media_control("play"))
            control_buttons.addWidget(self.play_button)

            self.pause_button = QPushButton("Pause")
            self.pause_button.setFont(bold_font)
            self.pause_button.clicked.connect(lambda: self.media_control("pause"))
            control_buttons.addWidget(self.pause_button)

            self.next_button = QPushButton("Next")
            self.next_button.setFont(bold_font)
            self.next_button.clicked.connect(lambda: self.media_control("next"))
            control_buttons.addWidget(self.next_button)

            self.previous_button = QPushButton("Previous")
            self.previous_button.setFont(bold_font)
            self.previous_button.clicked.connect(lambda: self.media_control("previous"))
            control_buttons.addWidget(self.previous_button)

            self.rewind_button = QPushButton("Rewind")
            self.rewind_button.setFont(bold_font)
            self.rewind_button.clicked.connect(lambda: self.media_control("rewind"))
            control_buttons.addWidget(self.rewind_button)

            media_control_layout.addLayout(control_buttons)
            layout.addWidget(media_control_group)

        widget = QWidget()
        widget.setLayout(layout)
        return widget

    def media_control(self,command):
        self.bluetooth_device_manager.media_control(command)
