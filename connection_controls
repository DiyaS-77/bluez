    def pair(self, address):
        """
        Pair with the device at the given Bluetooth address.

        :param address: Bluetooth device MAC address.
        :return: True if paired successfully, False otherwise.
        """
        try:
            device_path = self._get_device_path(address)
            device = self._get_device_interface(device_path)

            print(f"Initiating pairing with {device_path}")
            device.Pair()
            return True

        except dbus.exceptions.DBusException as e:
            if "Did not receive a reply" in str(e) or "Timeout" in str(e):
                print("[BluetoothDeviceManager] Pair() timeout, checking status...")
                time.sleep(2)

                device_props = dbus.Interface(
                    self.bus.get_object("org.bluez", device_path),
                    "org.freedesktop.DBus.Properties"
                )
                paired = device_props.Get("org.bluez.Device1", "Paired")
                if paired:
                    print("[BluetoothDeviceManager] Device is actually paired.")
                    return True

            print(f"[BluetoothDeviceManager] Pairing failed: {e}")
            return False
















































def find_device_path(self, address, interface):
    adapter_path = f"/org/bluez/{interface}"
    objects = self.object_manager.GetManagedObjects()
    for path, interfaces in objects.items():
        if "org.bluez.Device1" in interfaces:
            if interfaces["org.bluez.Device1"].get("Address") == address and path.startswith(adapter_path):
                return path
    return None


def br_edr_connect(self, address, interface):
    device_path = self.find_device_path(address, interface)
    if device_path:
        try:
            device = dbus.Interface(self.bus.get_object("org.bluez", device_path),
                                    dbus_interface="org.bluez.Device1")
            device.Connect()

            props = dbus.Interface(self.bus.get_object("org.bluez", device_path),
                                   "org.freedesktop.DBus.Properties")
            connected = props.Get("org.bluez.Device1", "Connected")
            return connected
        except Exception as e:
            print(f"Connection failed: {e}")
    else:
        print("Device path not found for connection")
    return False

def disconnect_le_device(self, address, interface):
    device_path = self.find_device_path(address, interface)
    if device_path:
        try:
            device = dbus.Interface(self.bus.get_object("org.bluez", device_path), "org.bluez.Device1")
            props = dbus.Interface(self.bus.get_object("org.bluez", device_path), "org.freedesktop.DBus.Properties")
            connected = props.Get("org.bluez.Device1", "Connected")
            if not connected:
                print(f"Device {address} is already disconnected.")
                return True
            device.Disconnect()
            return True
        except dbus.exceptions.DBusException as e:
            print(f"Error disconnecting device {address}: {e}")
    return False


def remove_device(self, address, interface):
    adapter_path = f"/org/bluez/{interface}"
    objects = self.object_manager.GetManagedObjects()

    for path, interfaces in objects.items():
        if "org.bluez.Device1" in interfaces:
            if interfaces["org.bluez.Device1"].get("Address") == address and path.startswith(adapter_path):
                try:
                    adapter = dbus.Interface(
                        self.bus.get_object("org.bluez", adapter_path),
                        "org.bluez.Adapter1"
                    )
                    adapter.RemoveDevice(path)
                    return True
                except dbus.exceptions.DBusException as e:
                    print(f"Error removing device {address}: {e}")
                    return False
    print(f"Device with address {address} not found on {interface}")
    return True  # already removed


def le_connect(self, address, interface):
    device_path = self.find_device_path(address, interface)
    if device_path:
        try:
            device = dbus.Interface(
                self.bus.get_object("org.bluez", device_path),
                dbus_interface="org.bluez.Device1"
            )
            device.ConnectProfile('0000110e-0000-1000-8000-00805f9b34fb')  # A2DP
        except Exception as e:
            print("LE Connection failed:", e)


