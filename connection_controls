
    def br_edr_connect(self, address):
        """
        Establish a BR/EDR connection to the specified Bluetooth device.

        :param address: Bluetooth device MAC address.
        :return: True if connected, False otherwise.
        """
        device_path = self.find_device_path(address)
        if device_path:
            try:
                device = dbus.Interface(self.bus.get_object("org.bluez", device_path),
                                        dbus_interface="org.bluez.Device1")
                device.Connect()

                props = dbus.Interface(self.bus.get_object("org.bluez", device_path),
                                       "org.freedesktop.DBus.Properties")
                connected = props.Get("org.bluez.Device1", "Connected")
                if connected:
                    print("Connection is successful")
                    return True
                else:
                    print("Connection attempted but not confirmed")
                    return False
            except Exception as e:
                print(f"Connection failed: {e}")
                return False
        else:
            print("Device path not found for connection")
            return False


    def disconnect_le_device(self, address):
        """
        Disconnect a Bluetooth LE device using BlueZ D-Bus interface.

        :param address: Bluetooth MAC address (e.g., 'C0:26:DA:00:12:34')
        :return: True if disconnect successful or not connected, False otherwise.
        """
        try:
            device_path = self._get_device_path(address)

            # Access device and its properties
            device = dbus.Interface(self.bus.get_object("org.bluez", device_path), "org.bluez.Device1")
            props = dbus.Interface(self.bus.get_object("org.bluez", device_path), "org.freedesktop.DBus.Properties")

            # Check if already disconnected
            connected = props.Get("org.bluez.Device1", "Connected")
            if not connected:
                print(f"[BluetoothDeviceManager] Device {address} is already disconnected.")
                return True

            # Perform disconnect
            print(f"[BluetoothDeviceManager] Disconnecting device {address}...")
            device.Disconnect()
            #time.sleep(1)  # Optional: allow async operations to complete

            print(f"[BluetoothDeviceManager] Device {address} disconnected successfully.")
            return True

        except dbus.exceptions.DBusException as e:
            print(f"[BluetoothDeviceManager] Error disconnecting device {address}: {e}")
            return False

    def remove_device(self, address):
        """
        Remove the bonded device from the system.

        :param address: Bluetooth device MAC address.
        :return: True if removed or already gone, False otherwise.
        """
        obj = self.bus.get_object("org.bluez", "/")
        manager = dbus.Interface(obj, "org.freedesktop.DBus.ObjectManager")
        objects = manager.GetManagedObjects()

        for path, interfaces in objects.items():
            if "org.bluez.Device1" in interfaces:
                if interfaces["org.bluez.Device1"].get("Address") == address:
                    print(f"[BluetoothDeviceManager] Removing device {path}")
                    try:
                        adapter = dbus.Interface(
                            self.bus.get_object("org.bluez", self.adapter_path),
                            "org.bluez.Adapter1"
                        )
                        adapter.RemoveDevice(path)
                        return True
                    except dbus.exceptions.DBusException as e:
                        if "org.freedesktop.DBus.Error.UnknownObject" in str(e):
                            print(f"[BluetoothDeviceManager] Device {address} already removed")
                            return True  # Still a success
                        else:
                            print(f"[BluetoothDeviceManager] Failed to remove {address}: {e}")
                            return False

        print(f"[BluetoothDeviceManager] Device with address {address} not found")
        return True  # Treat as success since it's already not present


    def le_connect(self, address):
        """
        Initiates Low Energy (LE) connection using a specific profile.

        Args:
            address (str): Bluetooth MAC address.
        returns:
            None
        """
        device_path = self.find_device_path(address)
        if device_path:
            try:
                device = dbus.Interface(
                    self.bus.get_object("org.bluez", device_path),
                    dbus_interface="org.bluez.Device1"
                )
                device.ConnectProfile('0000110e-0000-1000-8000-00805f9b34fb')  # HID Profile
            except Exception as e:
                print("LE Connection has failed:", e)
