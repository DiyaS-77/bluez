from PyQt6.QtWidgets import *
from PyQt6.QtGui import QFont
from PyQt6.QtCore import Qt
import subprocess
import psutil
from bluezDiy import BluezServices
from Bluez_utils import BluetoothDeviceManager

class DaemonManager:
    def __init__(self):
        self.bluetoothd_proc = None
        self.pulseaudio_proc = None

    def is_running(self, name):
        for proc in psutil.process_iter(['pid', 'name']):
            if proc.info['name'] == name:
                return True
        return False

    def start_daemons(self):
        if not self.is_running("bluetoothd"):
            self.bluetoothd_proc = subprocess.Popen(["bluetoothd"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if not self.is_running("pulseaudio"):
            self.pulseaudio_proc = subprocess.Popen(["pulseaudio", "--start"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    def stop_daemons(self):
        for proc_name in ["bluetoothd", "pulseaudio"]:
            for proc in psutil.process_iter(['pid', 'name']):
                if proc.info['name'] == proc_name:
                    proc.terminate()

class HostUI(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Bluetooth Host UI")
        self.setGeometry(100, 100, 1200, 600)

        self.daemon_manager = DaemonManager()
        self.daemon_manager.start_daemons()

        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        label = QLabel("Host Bluetooth Test UI")
        label.setFont(QFont("Arial", 18))
        label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(label)

        self.start_button = QPushButton("Start Test Host")
        self.start_button.clicked.connect(self.launch_test_host)
        layout.addWidget(self.start_button)

        self.back_button = QPushButton("Back")
        self.back_button.clicked.connect(self.handle_back_pressed)
        layout.addWidget(self.back_button)

        self.setLayout(layout)

    def launch_test_host(self):
        # Your logic to launch test host view
        pass

    def handle_back_pressed(self):
        self.daemon_manager.stop_daemons()
        self.close()

if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    window = HostUI()
    window.show()
    sys.exit(app.exec())